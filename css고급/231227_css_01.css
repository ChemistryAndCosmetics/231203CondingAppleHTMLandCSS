.main-background {
  width: 100%;
  height: 500px;
  background-image: url(../img/shoes.jpg);
    /* ../는 상위폴더로 이동 */
  background-size: cover;
  /* cover쓰면 알아서 빈공간없이 채워짐 */
  background-repeat: no-repeat;
  background-position: center;
  padding: 1px;
  /* 안에 글씨있으면 글씨에도 필터 적용 */
  text-align: center;
  position: relative;
}

.main-title {
  color: white;
  font-size: 40px;
  margin-top: 200px;
  /* padding등 없이 테두리겹치면 마진콜랩스 버그 일어남 */
}

.text-box {
  background-color: white;
}

.pseudo::first-letter {
  color: red;
  font-size: 20px;
}
/* 이런 경우가 pseudo-element */
/* 그 영역의 일부만 스타일 줄 때 사용 */

.pseudo::first-line {
  color: red;
  font-size: 20px;
}

/* 이외에도 after, before도 pseudo-element에 자주 사용 */

.pseudo::after {
  content: '안녕';
  color: red;
  font-size: 20px;
}
/* clear: both; float: none; 이것도 아래와 같이 대체할 수 있음
::after {
  content: '';
  display: block;
  float: none;
} */
.input-file::file-selector-button {
  background: skyblue;
  border: none;
  padding: 15px;
}

.input-file::file-selector-button:hover {
  background: blue;
}
/* 이렇게 수도 엘리먼트와 수도 클래스를 같이 쓸 수 있음 */

.main-button {
  padding: 15px;
  font-size: 15px;
  background-color: white;
  border: none;
  border-radius: 5px;
  position: absolute;
  /* 좌표이동하려면 relative 필요하고 이 경우는 원위치가 기준,
  fixed쓰면 고정. absolute써도 이동가능하나 relative있는 부모가 기준,
  포지션쓰면 공중에 뜸 */
  bottom: 70px;
  left: 0;
  right: 0;
  margin: auto;
  width: 60px;
  /* left 0 right 0 margin auto width 적당히 쓰면 absolute 써도 가운데 배치 가능 */
  z-index: 5;
  /* z인덱스 높을수록 더 위에 존재 */
}

.main-button:hover {
  color: red;
}
/* 이렇게 특정 요소가 어떤 상태일 때 스타일 변화
가능케 하는 것이 pseudo-class */

.eclipse {
  width: 70%;
  /* 부모위드스에 따라 결정, 이경우는 body를 따라감. 반응형레이아웃 */
  max-width: 600px;
  /* 여기서의 width는 컨텐트 영역을 의미하므로 실제 width와 무관 */
  box-sizing: border-box;
  /* 이렇게 넣으면 max-width가 패딩과 보더도 포함
  만약 div { box-sizing: border-box; 넣으면 모든 div에 적용되어
  편리하게 사용할 수 있음, body { margin: 0px; 이런 것도 좋음
  normalize.css이런거 검색해서 호환성 문제 미리 해결하는 것 가능*/
  margin: auto;
  background-color: skyblue;
  text-align: center;
  padding: 10px;
  /* 마진은 현재요소주변의 여백공간, 패딩은 콘텐츠와테두리사이 여백공간 */
  position: relative;
  top: -50px;
}